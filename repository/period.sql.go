// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: period.sql

package repository

import (
	"context"
)

const createPeriod = `-- name: CreatePeriod :one
INSERT INTO periods (name) VALUES (?) RETURNING id, name
`

func (q *Queries) CreatePeriod(ctx context.Context, name string) (Period, error) {
	row := q.db.QueryRowContext(ctx, createPeriod, name)
	var i Period
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPeriod = `-- name: GetPeriod :one
SELECT id, name FROM periods WHERE id = ?
`

func (q *Queries) GetPeriod(ctx context.Context, id int64) (Period, error) {
	row := q.db.QueryRowContext(ctx, getPeriod, id)
	var i Period
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPeriodByName = `-- name: GetPeriodByName :one
SELECT id, name FROM periods WHERE name = ?
`

func (q *Queries) GetPeriodByName(ctx context.Context, name string) (Period, error) {
	row := q.db.QueryRowContext(ctx, getPeriodByName, name)
	var i Period
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listPeriods = `-- name: ListPeriods :many
SELECT id, name FROM periods
`

func (q *Queries) ListPeriods(ctx context.Context) ([]Period, error) {
	rows, err := q.db.QueryContext(ctx, listPeriods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Period
	for rows.Next() {
		var i Period
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
