// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: selection.sql

package repository

import (
	"context"
)

const createSelection = `-- name: CreateSelection :one
INSERT INTO selections (
    name, kind, date, institution, course
) VALUES (
  ?, ?, ?, ?, ?
) RETURNING id, kind, name, date, institution, course
`

type CreateSelectionParams struct {
	Name        string
	Kind        int64
	Date        string
	Institution string
	Course      string
}

func (q *Queries) CreateSelection(ctx context.Context, arg CreateSelectionParams) (Selection, error) {
	row := q.db.QueryRowContext(ctx, createSelection,
		arg.Name,
		arg.Kind,
		arg.Date,
		arg.Institution,
		arg.Course,
	)
	var i Selection
	err := row.Scan(
		&i.ID,
		&i.Kind,
		&i.Name,
		&i.Date,
		&i.Institution,
		&i.Course,
	)
	return i, err
}

const deleteSelection = `-- name: DeleteSelection :exec
DELETE FROM selections 
WHERE ID = ?
`

func (q *Queries) DeleteSelection(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSelection, id)
	return err
}

const getSelection = `-- name: GetSelection :one
 SELECT id, kind, name, date, institution, course
 FROM selections
 WHERE id = ?
`

func (q *Queries) GetSelection(ctx context.Context, id int64) (Selection, error) {
	row := q.db.QueryRowContext(ctx, getSelection, id)
	var i Selection
	err := row.Scan(
		&i.ID,
		&i.Kind,
		&i.Name,
		&i.Date,
		&i.Institution,
		&i.Course,
	)
	return i, err
}

const getSelectionByKind = `-- name: GetSelectionByKind :one
SELECT id, kind, name, date, institution, course
FROM selections
WHERE kind = ?
`

func (q *Queries) GetSelectionByKind(ctx context.Context, kind int64) (Selection, error) {
	row := q.db.QueryRowContext(ctx, getSelectionByKind, kind)
	var i Selection
	err := row.Scan(
		&i.ID,
		&i.Kind,
		&i.Name,
		&i.Date,
		&i.Institution,
		&i.Course,
	)
	return i, err
}

const listSelections = `-- name: ListSelections :many
SELECT id, kind, name, date, institution, course
FROM selections
`

func (q *Queries) ListSelections(ctx context.Context) ([]Selection, error) {
	rows, err := q.db.QueryContext(ctx, listSelections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Selection
	for rows.Next() {
		var i Selection
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.Name,
			&i.Date,
			&i.Institution,
			&i.Course,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
