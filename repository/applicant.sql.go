// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: applicant.sql

package repository

import (
	"context"
)

const createApplicant = `-- name: CreateApplicant :one
INSERT INTO applicants (
    cpf, name, birthdate, sex, mother_name, address_line, address_line2,
    house_number, neighborhood, municipality, state, cep, email, phone1, social_name,
    phone2
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, cpf, name, social_name, birthdate, sex, mother_name, address_line, address_line2, house_number, neighborhood, municipality, state, cep, email, phone1, phone2
`

type CreateApplicantParams struct {
	Cpf          string
	Name         string
	Birthdate    string
	Sex          string
	MotherName   string
	AddressLine  string
	AddressLine2 string
	HouseNumber  string
	Neighborhood string
	Municipality string
	State        string
	Cep          string
	Email        string
	Phone1       string
	SocialName   string
	Phone2       string
}

func (q *Queries) CreateApplicant(ctx context.Context, arg CreateApplicantParams) (Applicant, error) {
	row := q.db.QueryRowContext(ctx, createApplicant,
		arg.Cpf,
		arg.Name,
		arg.Birthdate,
		arg.Sex,
		arg.MotherName,
		arg.AddressLine,
		arg.AddressLine2,
		arg.HouseNumber,
		arg.Neighborhood,
		arg.Municipality,
		arg.State,
		arg.Cep,
		arg.Email,
		arg.Phone1,
		arg.SocialName,
		arg.Phone2,
	)
	var i Applicant
	err := row.Scan(
		&i.ID,
		&i.Cpf,
		&i.Name,
		&i.SocialName,
		&i.Birthdate,
		&i.Sex,
		&i.MotherName,
		&i.AddressLine,
		&i.AddressLine2,
		&i.HouseNumber,
		&i.Neighborhood,
		&i.Municipality,
		&i.State,
		&i.Cep,
		&i.Email,
		&i.Phone1,
		&i.Phone2,
	)
	return i, err
}

const deleteApplicant = `-- name: DeleteApplicant :exec
DELETE FROM applicants WHERE id = ?
`

func (q *Queries) DeleteApplicant(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteApplicant, id)
	return err
}

const getApplicant = `-- name: GetApplicant :one
SELECT id, cpf, name, social_name, birthdate, sex, mother_name, address_line, address_line2, house_number, neighborhood, municipality, state, cep, email, phone1, phone2 FROM applicants WHERE id = ?
`

func (q *Queries) GetApplicant(ctx context.Context, id int64) (Applicant, error) {
	row := q.db.QueryRowContext(ctx, getApplicant, id)
	var i Applicant
	err := row.Scan(
		&i.ID,
		&i.Cpf,
		&i.Name,
		&i.SocialName,
		&i.Birthdate,
		&i.Sex,
		&i.MotherName,
		&i.AddressLine,
		&i.AddressLine2,
		&i.HouseNumber,
		&i.Neighborhood,
		&i.Municipality,
		&i.State,
		&i.Cep,
		&i.Email,
		&i.Phone1,
		&i.Phone2,
	)
	return i, err
}

const updateApplicantEmail = `-- name: UpdateApplicantEmail :exec
UPDATE applicants SET email = ? WHERE id = ?
`

type UpdateApplicantEmailParams struct {
	Email string
	ID    int64
}

func (q *Queries) UpdateApplicantEmail(ctx context.Context, arg UpdateApplicantEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateApplicantEmail, arg.Email, arg.ID)
	return err
}
