// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: application.sql

package repository

import (
	"context"
	"database/sql"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications (
    enrollment_id, class_id, option, languages_score,
    humanities_score, natural_sciences_score, mathematics_score, essay_score,
    composite_score, ranking, status, selection_id, rollcall_id, applicant_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id, enrollment_id, class_id, option, languages_score, humanities_score, natural_sciences_score, mathematics_score, essay_score, composite_score, ranking, status, selection_id, rollcall_id, applicant_id
`

type CreateApplicationParams struct {
	EnrollmentID         string
	ClassID              int64
	Option               int64
	LanguagesScore       float64
	HumanitiesScore      float64
	NaturalSciencesScore float64
	MathematicsScore     float64
	EssayScore           float64
	CompositeScore       float64
	Ranking              int64
	Status               sql.NullString
	SelectionID          int64
	RollcallID           sql.NullInt64
	ApplicantID          int64
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, createApplication,
		arg.EnrollmentID,
		arg.ClassID,
		arg.Option,
		arg.LanguagesScore,
		arg.HumanitiesScore,
		arg.NaturalSciencesScore,
		arg.MathematicsScore,
		arg.EssayScore,
		arg.CompositeScore,
		arg.Ranking,
		arg.Status,
		arg.SelectionID,
		arg.RollcallID,
		arg.ApplicantID,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.EnrollmentID,
		&i.ClassID,
		&i.Option,
		&i.LanguagesScore,
		&i.HumanitiesScore,
		&i.NaturalSciencesScore,
		&i.MathematicsScore,
		&i.EssayScore,
		&i.CompositeScore,
		&i.Ranking,
		&i.Status,
		&i.SelectionID,
		&i.RollcallID,
		&i.ApplicantID,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE FROM applications WHERE id = ?
`

func (q *Queries) DeleteApplication(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteApplication, id)
	return err
}

const getApplication = `-- name: GetApplication :one
SELECT applications.id, applications.enrollment_id, applications.class_id, applications.option, applications.languages_score, applications.humanities_score, applications.natural_sciences_score, applications.mathematics_score, applications.essay_score, applications.composite_score, applications.ranking, applications.status, applications.selection_id, applications.rollcall_id, applications.applicant_id, classes.id, classes.period_id, classes.quota_id, classes.seats, classes.minimum_score, quotas.id, quotas.name, periods.id, periods.name, rollcalls.id, rollcalls.number, rollcalls.status, applicants.id, applicants.cpf, applicants.name, applicants.social_name, applicants.birthdate, applicants.sex, applicants.mother_name, applicants.address_line, applicants.address_line2, applicants.house_number, applicants.neighborhood, applicants.municipality, applicants.state, applicants.cep, applicants.email, applicants.phone1, applicants.phone2
FROM applications
JOIN classes ON applications.class_id = classes.id
JOIN periods ON classes.period_id = periods.id
JOIN quotas ON classes.quota_id = quotas.id
LEFT JOIN rollcalls ON applications.rollcall_id = rollcalls.id
JOIN applicants ON applications.applicant_id = applicants.id
WHERE applications.id = ?
`

type GetApplicationRow struct {
	Application Application
	Class       Class
	Quota       Quota
	Period      Period
	Rollcall    Rollcall
	Applicant   Applicant
}

func (q *Queries) GetApplication(ctx context.Context, id int64) (GetApplicationRow, error) {
	row := q.db.QueryRowContext(ctx, getApplication, id)
	var i GetApplicationRow
	err := row.Scan(
		&i.Application.ID,
		&i.Application.EnrollmentID,
		&i.Application.ClassID,
		&i.Application.Option,
		&i.Application.LanguagesScore,
		&i.Application.HumanitiesScore,
		&i.Application.NaturalSciencesScore,
		&i.Application.MathematicsScore,
		&i.Application.EssayScore,
		&i.Application.CompositeScore,
		&i.Application.Ranking,
		&i.Application.Status,
		&i.Application.SelectionID,
		&i.Application.RollcallID,
		&i.Application.ApplicantID,
		&i.Class.ID,
		&i.Class.PeriodID,
		&i.Class.QuotaID,
		&i.Class.Seats,
		&i.Class.MinimumScore,
		&i.Quota.ID,
		&i.Quota.Name,
		&i.Period.ID,
		&i.Period.Name,
		&i.Rollcall.ID,
		&i.Rollcall.Number,
		&i.Rollcall.Status,
		&i.Applicant.ID,
		&i.Applicant.Cpf,
		&i.Applicant.Name,
		&i.Applicant.SocialName,
		&i.Applicant.Birthdate,
		&i.Applicant.Sex,
		&i.Applicant.MotherName,
		&i.Applicant.AddressLine,
		&i.Applicant.AddressLine2,
		&i.Applicant.HouseNumber,
		&i.Applicant.Neighborhood,
		&i.Applicant.Municipality,
		&i.Applicant.State,
		&i.Applicant.Cep,
		&i.Applicant.Email,
		&i.Applicant.Phone1,
		&i.Applicant.Phone2,
	)
	return i, err
}

const updateApplication = `-- name: UpdateApplication :exec
UPDATE applications SET status = ?, rollcall_id = ? WHERE id = ?
`

type UpdateApplicationParams struct {
	Status     sql.NullString
	RollcallID sql.NullInt64
	ID         int64
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) error {
	_, err := q.db.ExecContext(ctx, updateApplication, arg.Status, arg.RollcallID, arg.ID)
	return err
}
