// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: class.sql

package repository

import (
	"context"
)

const createClass = `-- name: CreateClass :one
INSERT INTO classes (
    period_id, quota_id, seats, minimum_score
) VALUES (
    ?, ?, ?, ?
) RETURNING id, period_id, quota_id, seats, minimum_score
`

type CreateClassParams struct {
	PeriodID     int64
	QuotaID      int64
	Seats        int64
	MinimumScore float64
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) (Class, error) {
	row := q.db.QueryRowContext(ctx, createClass,
		arg.PeriodID,
		arg.QuotaID,
		arg.Seats,
		arg.MinimumScore,
	)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.PeriodID,
		&i.QuotaID,
		&i.Seats,
		&i.MinimumScore,
	)
	return i, err
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM classes WHERE id = ?
`

func (q *Queries) DeleteClass(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClass, id)
	return err
}

const getClass = `-- name: GetClass :one
SELECT classes.id, classes.period_id, classes.quota_id, classes.seats, classes.minimum_score, periods.id, periods.name, quotas.id, quotas.name
FROM classes
JOIN periods ON classes.period_id = periods.id
JOIN quotas ON classes.quota_id = quotas.id
WHERE classes.id = ?
`

type GetClassRow struct {
	Class  Class
	Period Period
	Quota  Quota
}

func (q *Queries) GetClass(ctx context.Context, id int64) (GetClassRow, error) {
	row := q.db.QueryRowContext(ctx, getClass, id)
	var i GetClassRow
	err := row.Scan(
		&i.Class.ID,
		&i.Class.PeriodID,
		&i.Class.QuotaID,
		&i.Class.Seats,
		&i.Class.MinimumScore,
		&i.Period.ID,
		&i.Period.Name,
		&i.Quota.ID,
		&i.Quota.Name,
	)
	return i, err
}

const listClasses = `-- name: ListClasses :many
SELECT classes.id, classes.period_id, classes.quota_id, classes.seats, classes.minimum_score, periods.id, periods.name, quotas.id, quotas.name
FROM classes
JOIN periods ON classes.period_id = periods.id
JOIN quotas ON classes.quota_id = quotas.id
`

type ListClassesRow struct {
	Class  Class
	Period Period
	Quota  Quota
}

func (q *Queries) ListClasses(ctx context.Context) ([]ListClassesRow, error) {
	rows, err := q.db.QueryContext(ctx, listClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClassesRow
	for rows.Next() {
		var i ListClassesRow
		if err := rows.Scan(
			&i.Class.ID,
			&i.Class.PeriodID,
			&i.Class.QuotaID,
			&i.Class.Seats,
			&i.Class.MinimumScore,
			&i.Period.ID,
			&i.Period.Name,
			&i.Quota.ID,
			&i.Quota.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClassesByPeriod = `-- name: ListClassesByPeriod :many
SELECT classes.id, classes.period_id, classes.quota_id, classes.seats, classes.minimum_score, periods.id, periods.name, quotas.id, quotas.name
FROM classes
JOIN periods ON classes.period_id = periods.id
JOIN quotas ON classes.quota_id = quotas.id
WHERE classes.period_id = ?
`

type ListClassesByPeriodRow struct {
	Class  Class
	Period Period
	Quota  Quota
}

func (q *Queries) ListClassesByPeriod(ctx context.Context, periodID int64) ([]ListClassesByPeriodRow, error) {
	rows, err := q.db.QueryContext(ctx, listClassesByPeriod, periodID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClassesByPeriodRow
	for rows.Next() {
		var i ListClassesByPeriodRow
		if err := rows.Scan(
			&i.Class.ID,
			&i.Class.PeriodID,
			&i.Class.QuotaID,
			&i.Class.Seats,
			&i.Class.MinimumScore,
			&i.Period.ID,
			&i.Period.Name,
			&i.Quota.ID,
			&i.Quota.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClassesByPeriodAndQuota = `-- name: ListClassesByPeriodAndQuota :many
SELECT classes.id, classes.period_id, classes.quota_id, classes.seats, classes.minimum_score, periods.id, periods.name, quotas.id, quotas.name
FROM classes
JOIN periods ON classes.period_id = periods.id
JOIN quotas ON classes.quota_id = quotas.id
WHERE period_id = ? AND quota_id = ?
`

type ListClassesByPeriodAndQuotaParams struct {
	PeriodID int64
	QuotaID  int64
}

type ListClassesByPeriodAndQuotaRow struct {
	Class  Class
	Period Period
	Quota  Quota
}

func (q *Queries) ListClassesByPeriodAndQuota(ctx context.Context, arg ListClassesByPeriodAndQuotaParams) ([]ListClassesByPeriodAndQuotaRow, error) {
	rows, err := q.db.QueryContext(ctx, listClassesByPeriodAndQuota, arg.PeriodID, arg.QuotaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClassesByPeriodAndQuotaRow
	for rows.Next() {
		var i ListClassesByPeriodAndQuotaRow
		if err := rows.Scan(
			&i.Class.ID,
			&i.Class.PeriodID,
			&i.Class.QuotaID,
			&i.Class.Seats,
			&i.Class.MinimumScore,
			&i.Period.ID,
			&i.Period.Name,
			&i.Quota.ID,
			&i.Quota.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
